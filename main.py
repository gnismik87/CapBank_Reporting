# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CapMain.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


##additions##

import time
import os
import openpyxl
import xlsxwriter
import matplotlib.pyplot as plt
import pandas as pd

def extract_ddmm(fDateCurrentString):
    year = fDateCurrentString[0:4]
    month = fDateCurrentString[5:7]
    day = fDateCurrentString[8:11]
    current = float(fDateCurrentString[19:])
    #current = (current*1000)/ ratio
    return year, month, day,current ;

months = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr','05': 'May','06': 'Jun','07': 'Jul','08': 'Aug','09': 'Sep','10': 'Oct','11': 'Nov','12': 'Dec'}

##additions-end##


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(460, 408)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gBxReqInputs = QtWidgets.QGroupBox(self.centralwidget)
        self.gBxReqInputs.setGeometry(QtCore.QRect(10, 10, 441, 361))
        self.gBxReqInputs.setObjectName("gBxReqInputs")
        self.pBOutput = QtWidgets.QPushButton(self.gBxReqInputs)
        self.pBOutput.setGeometry(QtCore.QRect(30, 280, 391, 61))
        self.pBOutput.setObjectName("pBOutput")
        self.lineEdit = QtWidgets.QLineEdit(self.gBxReqInputs)
        self.lineEdit.setGeometry(QtCore.QRect(130, 130, 291, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.tLblCapBank = QtWidgets.QLabel(self.gBxReqInputs)
        self.tLblCapBank.setGeometry(QtCore.QRect(30, 130, 111, 16))
        self.tLblCapBank.setObjectName("tLblCapBank")
        self.tLblPath = QtWidgets.QLabel(self.gBxReqInputs)
        self.tLblPath.setGeometry(QtCore.QRect(130, 30, 47, 13))
        self.tLblPath.setText("")
        self.tLblPath.setObjectName("tLblPath")
        self.gBxCtRatio = QtWidgets.QGroupBox(self.gBxReqInputs)
        self.gBxCtRatio.setGeometry(QtCore.QRect(30, 180, 391, 71))
        self.gBxCtRatio.setObjectName("gBxCtRatio")
        self.rB1ARatio = QtWidgets.QRadioButton(self.gBxCtRatio)
        self.rB1ARatio.setGeometry(QtCore.QRect(110, 30, 82, 17))
        self.rB1ARatio.setObjectName("rB1ARatio")
        self.rB5ARatio = QtWidgets.QRadioButton(self.gBxCtRatio)
        self.rB5ARatio.setGeometry(QtCore.QRect(30, 30, 82, 17))
        self.rB5ARatio.setObjectName("rB5ARatio")
        self.spnBoxAlarm = QtWidgets.QSpinBox(self.gBxReqInputs)
        self.spnBoxAlarm.setGeometry(QtCore.QRect(130, 40, 291, 22))
        self.spnBoxAlarm.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.spnBoxAlarm.setMaximum(10000)
        self.spnBoxAlarm.setObjectName("spnBoxAlarm")
        self.tLblAlarm = QtWidgets.QLabel(self.gBxReqInputs)
        self.tLblAlarm.setGeometry(QtCore.QRect(30, 40, 81, 16))
        self.tLblAlarm.setObjectName("tLblAlarm")
        self.spnBoxTrip = QtWidgets.QSpinBox(self.gBxReqInputs)
        self.spnBoxTrip.setGeometry(QtCore.QRect(130, 80, 291, 22))
        self.spnBoxTrip.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.spnBoxTrip.setMinimum(0)
        self.spnBoxTrip.setMaximum(10000)
        self.spnBoxTrip.setProperty("value", 0)
        self.spnBoxTrip.setObjectName("spnBoxTrip")
        self.tLblTrip = QtWidgets.QLabel(self.gBxReqInputs)
        self.tLblTrip.setGeometry(QtCore.QRect(30, 80, 81, 16))
        self.tLblTrip.setObjectName("tLblTrip")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 460, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


##additions##

        self.pBOutput.clicked.connect(self.pBOutput_clicked)
        self.rB1ARatio.toggled.connect(lambda:self.rdbtnQScrapeState(self.rB1ARatio))
        self.rB5ARatio.toggled.connect(lambda:self.rdbtnQScrapeState(self.rB5ARatio))
        self.rB1ARatio.setChecked(True)

        
    def pBOutput_clicked(self,i):
        if os.path.exists("daily_max_current.txt"):
            os.remove("daily_max_current.txt")
        if os.path.exists("Excel.xlsx"):
            os.remove("Excel.xlsx") 
        tit_le = self.lineEdit.text()

        trip_level = self.spnBoxTrip.text()
        alarm_level = self.spnBoxAlarm.text()
        wb = openpyxl.load_workbook(filename="unbalance.xlsx")
        sheet=wb.active

        #######################
        #Setup initializations
        #######################

        initial_date = str(sheet["A3"].value) #convert date-format into a string 
        initial_current = str(sheet["B3"].value)
        initial_dateCurrentString = initial_date + initial_current
         
        last_year, last_month, last_day, max_current = extract_ddmm(initial_dateCurrentString)
        max_row = str(sheet.max_row)
        last_row = f"B{max_row}"

        for row in sheet["A3": last_row]:

            row_data =""
            for cell in row:
                row_data = row_data + str(cell.value) #combine colum A and B into one string

            year, month , day, current =  extract_ddmm(row_data)
           
            if (day != last_day):
                #print(last_row
                last_year, last_month , last_day, dum_current =  extract_ddmm(last_row_data)
                f = open("daily_max_current.txt", "a")
                f.write(f"{last_year}/{last_month}/{last_day}        {max_current} \n")
                f.close()
                max_current = current

            if (current > max_current):
                max_current = current
            else:
                max_current = max_current

            


            last_month = month
            last_day = day
            last_row_data = row_data


        workbook = xlsxwriter.Workbook("hello.xlsx")
        sheet = workbook.add_worksheet('hio')
        workbook.close



        ###########put data into x textfiles

        month_set = set()

        f = open("daily_max_current.txt", "r")

        for line in f:

             
             
             x  = line[5:7]
             month_set.add(x)
             f = open(f"month{x}.txt", "a")
             f.write(line)
             f.close
        #print(month)
        line = ''
        f =''
        a = {}
        workbook = xlsxwriter.Workbook('Excel.xlsx')
        for val in month_set:
            f = open(f"month{val}.txt", "r")
            count = 1
            val_int = int(val)
            a[val_int] = workbook.add_worksheet(f"month{val}")
            #print(val_int)
            for line in f:
                count = count +1
                year, month , day, current =  extract_ddmm(line)
                current = (current*1000)/ ratio
                a[val_int].write(f"A1", "year")
                a[val_int].write(f"B1", "month")
                a[val_int].write(f"C1", "day")
                a[val_int].write(f"D1", "current")
                a[val_int].write(f"A{count}", year)
                a[val_int].write(f"B{count}", month)
                a[val_int].write(f"C{count}", day)
                a[val_int].write(f"D{count}", current)
            
            line = ''
            f = ''
           
        workbook.close()
        #val = ''
        #print(month_set)
        
        for val in month_set:
          
       
            #xls =pd.ExcelFile("Excel.xlsx")
            df1 = pd.read_excel("Excel.xlsx", f"month{val}")
           
           
            df1.plot(x ='day', y='current', kind = 'line')
            
            plt.title(tit_le)
            plt.ylabel("current (mA)")
            plt.xlabel(months[f"{val}"])
            
            plt.axhline(y=int(alarm_level), color='y', linestyle='-')
            plt.axhline(y=int(trip_level), color='r', linestyle='-')
            
            plt.legend(("current", f"alarm={alarm_level}mA",f"trip={trip_level}mA"))
       
            plt.show()
            #os.remove(f"month{val}.txt")
       
            
       

    def rdbtnQScrapeState(self, rdbtnQScrape):
        global ratio
        if rdbtnQScrape.isChecked() == True:
            choice = rdbtnQScrape.text()
            if choice == "5A":
                ratio = 5
            elif choice == "1A":
                ratio = 1
        
        
##additions-end##


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.gBxReqInputs.setTitle(_translate("MainWindow", "Required Inputs"))
        self.pBOutput.setText(_translate("MainWindow", "Output"))
        self.tLblCapBank.setText(_translate("MainWindow", "Capacitor Bank :"))
        self.gBxCtRatio.setTitle(_translate("MainWindow", "CT Ratio "))
        self.rB1ARatio.setText(_translate("MainWindow", "1A"))
        self.rB5ARatio.setText(_translate("MainWindow", "5A"))
        self.tLblAlarm.setText(_translate("MainWindow", "Alarm Setting :"))
        self.tLblTrip.setText(_translate("MainWindow", "Trip Setting :"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
